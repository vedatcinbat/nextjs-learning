************************************************************
- My Own Notes - 

* What is Next.js ?
-> Next.js is a popular React framework that enables developers to build
server-side rendered(SSR) and static websites
-> It is developed and maintained by Vercel
-> Next.js is known for its simplicity, performance, and ease of use, providing
features like automatic static optimization, static site generation(SSG), 
server-sider rendering(SSR), API routes, and more

* Why Should We Use Next.js ?
- Server-Side Rendering (SSR): Next.js allows you to render pages on the server, 
which can improve SEO and initial load performance by providing fully rendered HTML to the client.
- Static Site Generation (SSG): You can generate static HTML at build time, which can be served directly to users, 
improving performance and reducing server load.
- API Routes: Next.js provides a way to create API endpoints within the same project, simplifying the backend integration 
and allowing for a more seamless fullstack development experience.
- Image Optimization: Next.js has built-in support for image optimization, which can significantly improve 
page load times by automatically optimizing images based on the user's device.
- TypeScript Support: Next.js has built-in TypeScript support, making it easier to build and maintain large applications with type safety.



* Scenarios Where Next.js is Used and Why ?
- SEO-Driven Websites: SSR and SSG capabilities make Next.js ideal for websites where SEO is critical, 
such as blogs, marketing sites, and e-commerce platforms.

- Performance-Critical Applications: Next.js's automatic code splitting, image optimization, and static generation 
features help build highly performant web applications.

- Complex Web Applications: For applications requiring a combination of static and dynamic content, such as dashboards, 
social media platforms, and SaaS products, Next.js provides the flexibility needed to handle different rendering needs.

- E-commerce Platforms: The combination of SSR for dynamic product pages and SSG for static content like blogs or 
landing pages makes Next.js a strong choice for e-commerce websites.

- Content Management Systems (CMS): Next.js is often used with headless CMSs like Strapi, Contentful, or Sanity, 
leveraging its ability to pre-render static pages and dynamically render content as needed.


************************************************************



************************************************************************************************************************
- Course Notes -

* What is NextJS? Why would you use it?
-> Next.js is React framework
-> FullStack React Framework
-> Build fullstack apps instead of SPAs
-> React is becomeing a hybrid library
-> Using these features without a framework is tricky & typically not all you need
--> Route Setup & Handling
--> Form Submission
--> Data Fetching 
--> Authentication
--> And much more

-> Handles route setup & config 
-> Handles req & res
-> Handles data fetching & submission

* Key Features & Benefits OF Next.js
-> Fullstack Apps
--> NextJS blends frontend + backend (in the same project)
--> Advantage: Frontend and backend tasks are part of the same project

-> File-Based Routing
--> Routes are configured via the filesystem
--> Advantage: No code-based configuration or extra packages for routing required

-> Server-side Rendering 
--> By default, NextJS renders all pages on the server
--> Advantage: The finished HTML page is sent to the client (great for SEO)


* Creating a First Next.js App
> npx create-next-app@latest <folder-name>

* App Router
> app ---------> /
>>awesome ------> /awesome 
  ---- page.js -> This will rendered when '/awesome' requested
--- pages.js -> This will rendered when '/' requested
--- layout.js
---....

>awesome>page.js

export default function AwesomePage() {
    return (
        <main>
            <h1>Awesome Page</h1>
        </main>
    )
}




* Pages Router vs App Router
- Pages Router
--> Has been around for many years
--> Very stable
--> Used in many existing NextJS projects
--> Allows you to build feature-rich fullstack apps with React

- App Router
--> Introduced with NextJS 13
--> Marked as stable but still relatively new & buggy
--> Supports modern Next & React features (fullstack React apps)
--> The future of NextJS



** NextJS Essentials **
-> Routing, Pages & Components
-> Fetching & Sending Data
-> Styling, Images & Metadata


* Starting Setup
> npx create-next-app@latest <foldername>
> cd <foldername>
> npm run dev

* Understanding File-based Routing & React Server Components
-> NextJS uses files & folders to define routes 
-> Only files & folders inside the "app" folder are considered

/app 
- /about --> my-page/about
- /blog --> my-page/blog
  - /post-1 --> my-page/blog/post-1

-> React Server Components: Rendered "only on the server. Never on the client"


* Adding Another Route via the File System
-> localhost:3000/about
--> app/about folder for that and new "page.js" file


* Filenames Matter!
-> NextJS relies on reserved, special filenames
-> But the filenames only matter inside the "app" folder

page.js --> Define page content
layout.js --> Define wrapper around pages
not-found.js --> Define "Not Found" fallback page
error.js --> Define "Error" fallback page

> app/about/page.js

export deafult function AboutPage() {
    return (
        <main>
            <h1>About Page</h1>
            <p>This is about page</p>
        </main>
    )
}

> localhost:3000/about 
> GET /about 200 in 460ms
-page-
About Page
This is the about page



* Navigating Between Pages - Wrong & Right Solution
> import Link from "next/link"

return (
    .....
    <Link href="/about"></Link>
)
-> We are not leaving the application. SPA

* Working With Pages & Layouts
> about/layout.js

export const metadata = {
  title: "Create Next App - About",
  description: "Generated by create next app",
};

export default function AboutLayout({ children }) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  );
}

* Reserved File Names, Custom Components, How To Organize A NextJS Project
page.js => Create a new page (e.g., app/about/page.js creates a <your-domain>/about page)

layout.js => Create a new layout that wraps sibling and nested pages

not-found.js => Fallback page for "Not Found" errors (thrown by sibling or nested pages or layouts)

error.js => Fallback page for other errors (thrown by sibling pages or nested pages or layouts)

loading.js => Fallback page which is shown whilst sibling or nested pages (or layouts) are fetching data

route.js => Allows you to create an API route (i.e., a page which does NOT return JSX code but instead data, e.g., in the JSON format)


> app/page.js
import Header from "@/components/Header";

export default function Home() {
  return (
    <main>
      ** <Header />
      <p>Let's ge started!</p>
      {/* <p><a href="/about">About Us</a></p> */}
      <p><Link href="/about">About Us</Link></p>
    </main>
  );
}

> components/Header.js
export default function Header() {
    return (
        <>
            <img src="/logo.png" alt="Vercel Logo" width="200" height="200" />
            <h1>Welcome to this NextJS Course!</h1>
        </>
    );
}


* Configuring Dynamic Routes & Using Route Parameter
> app/blog/page.js

export default function BlogPage() {
    return (
        <main>
            <h1>This is Blog Page</h1>
            <Link href="/blog/post-1">Post1</Link>
            <Link href="/blog/post-2">Post2</Link>
            <Link href="/blog/something-else">Something Else</Link>
        </main>
    )
}


> app/blog/[slug] --> page.js

export default function BlogPostPage({params}) {
    const { slug } = params;
    return (
        <main>
            <h1>Blog Post Page - {slug}</h1>
            <p>This is a blog post</p>
        </main>
    )
}


-------------------------------
* Topics That I will complete in Udemy *
1. Routing & Page Rendering - Deep Dive
2. Data Fetching - Deep Dive
3. Mutating Data - Deep Dive
4. Understanding & Configuring Caching
5. NextJS App Optimizations
6. User Authentication
7. Pages & File-Based Routing 
8. Page Pre-Rendering & Data Fetching 
9. Optimizating NextJS Apps
10. Adding Backend Code with API Routes (Fullstack React)
11. Working with App-wide State (React Context)
12. Deploying NextJS Apps
13. Adding Authentication
14. NextJS Summary
-------------------------------


1. Routing & Page Rendering
-> Understanding Routing in NextJS Applications
-> File Name Conventions & Project Structure
-> Server Components vs Client Components

* Standard Routes
--- /about
-> Folder name = route path
app/about ---> my-website.com/about

* Dynamic Routes
--- /posts/<dynamic>
-> Define dynamic segments by wrapping the folder name with []
app/posts/[slug] --> my-website.com/posts/next-is-awesome

* Layouts & Pages
- Pages
--> Created via pages.js
--> Define page content (JSX) for a route

- Layouts
--> Created via layout.js file
--> Define wrapping layout for one or more pages

  
* Handling "Not Found" Errors & Showing "Not Found" Pages
-> Parallel Routes in Next.js is a feature that allows developers to create mutliple
independent route segments that can be rendered simuleously
-> This enables better organization of complex navigation structures and enchanged the user 
experience by allowing different parts of a page to load in parallel

- Key Features of Paralel Routes in Next.js
-> Nested Routing: You can nest routes within each other, allowing for more structured and 
hierarchical URL paths
-> Route Groups: You can group related routes together
-> Loading States: Parallel Routes enable the loading of different segments 
independently, which can improve the perceived performance of your 
application by displaying parts of the page while other parts are still loading
-> Code Splitting

- Example of usage Parallel Routing in Instagram Clone
--> Scenerio: When a user navigates to a profile page, the page includes several tabs
or sections like "Posts", "Tagged", "Saved" etc
--> Benefit: Parralel Routes allows each section to load independently. This way, the 
main profile details can be displayed immediately while the other sections are still 
loading

--> Scenerio: The Explore page may have various sections like "Trending", "Reels", "Popular"
etc.
--> Benefit: Allows different sections to load in parallel, making the Explore page feel more 
responsive

--> Scenerio: When a user navigates to the notifications or messages page, there could be 
various categories or sections ("All", "Unread", "Mentions")
--> Benefit: enable each section to load independently, ensuring that the user can 
see the initial content while other sctions are still loading







************************************************************************************************************************